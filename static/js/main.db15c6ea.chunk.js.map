{"version":3,"sources":["components/calculator pieces/Display.tsx","components/useAction.tsx","components/calculator pieces/Button.tsx","components/calculator pieces/Buttons.tsx","components/answers.ts","components/Calculator.tsx","App.tsx","index.tsx","components/calculate.ts"],"names":["Display","text","style","styles","container","backgroundColor","borderRadius","margin","height","padding","color","ActionReducer","state","option","type","length","action","map","i","parseInt","toString","Button","click","button","onClick","width","cursor","fontSize","textAlign","Buttons","dispatch","calculateResult","clear","createColumn","startingNumber","operator","buttons","push","key","tr","marginLeft","answers","num","answer","condition","Math","floor","random","Calculator","useState","setText","useReducer","actions","useEffect","join","actualResult","calculate","posibleAnswers","forEach","possibleAnswer","paddingBottom","overflow","title","paddingTop","App","ReactDOM","render","StrictMode","document","getElementById","expression","removeIllegalOperators","eval","filter"],"mappings":"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","file":"static/js/main.db15c6ea.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface Props {\n  text: string;\n}\n\nexport const Display: React.FC<Props> = ({ text }) => {\n  return (\n    <div style={styles.container}>\n      <p style={styles.text}>{text}</p>\n    </div>\n  );\n};\n\nconst styles = {\n  container: {\n    backgroundColor: \"#2e2e2e\",\n    borderRadius: \"5px\",\n    margin: \"10px\",\n    height: \"40px\",\n    padding: \"10px\",\n  },\n  text: {\n    color: \"white\",\n    margin: \"0\",\n  },\n};\n","import { useReducer } from \"react\";\n\nexport type Operator = \"+\" | \"-\" | \"*\" | \"/\";\n\nexport type Action = number | Operator;\n\nexport type Options = { type: \"add\"; action: Action } | { type: \"clear\" };\n\ntype State = Action[];\n\nconst ActionReducer = (state: State, option: Options) => {\n  switch (option.type) {\n    case \"add\":\n      // Making sure you can't use two operators after each other\n      if (\n        typeof state[state.length - 1] !== \"number\" &&\n        typeof option.action !== \"number\"\n      ) {\n        return state;\n      }\n\n      if (\n        typeof state[state.length - 1] === \"number\" &&\n        typeof option.action === \"number\"\n      ) {\n        // Merging two digits. 1 + 1 = 11\n        return state.map((action, i) => {\n          if (i === state.length - 1) {\n            return parseInt(action.toString() + option.action.toString());\n          }\n          return action;\n        });\n      }\n\n      return [...state, option.action];\n    case \"clear\":\n      return [];\n    default:\n      return state;\n  }\n};\n\nexport const useAction = () => {\n  return useReducer(ActionReducer, []);\n};\n","import React from \"react\";\n\ninterface Props {\n  text: string;\n  color: string;\n  click: () => void;\n}\n\nexport const Button: React.FC<Props> = ({ text, color, click }) => {\n  return (\n    <div style={{ ...styles.button, backgroundColor: color }} onClick={click}>\n      <h1 style={styles.text}>{text}</h1>\n    </div>\n  );\n};\n\nconst styles = {\n  button: {\n    width: \"50px\",\n    height: \"50px\",\n    cursor: \"pointer\",\n    borderRadius: \"5px\",\n    margin: \"10px\",\n  },\n  text: {\n    fontSize: \"40px\",\n    textAlign: \"center\" as const,\n    margin: \"0\",\n  },\n};\n","import React from \"react\";\nimport { Options, Operator } from \"../useAction\";\nimport { Button } from \"./Button\";\n\ninterface Props {\n  dispatch: (value: Options) => void;\n  calculateResult: () => void;\n  clear: () => void;\n}\n\nexport const Buttons: React.FC<Props> = ({\n  dispatch,\n  calculateResult,\n  clear,\n}) => {\n  const createColumn = (startingNumber: number, operator: Operator) => {\n    let buttons = [];\n    for (let i = startingNumber; i < startingNumber + 3; i++) {\n      buttons.push(\n        <td key={i + startingNumber}>\n          <Button\n            click={() => dispatch({ type: \"add\", action: i })}\n            text={i.toString()}\n            color=\"white\"\n          />\n        </td>\n      );\n    }\n    buttons.push(\n      <td key={startingNumber * -1}>\n        <Button\n          click={() => dispatch({ type: \"add\", action: operator })}\n          color=\"darkgrey\"\n          text={operator}\n        />\n      </td>\n    );\n    return buttons;\n  };\n\n  return (\n    <table>\n      <tbody>\n        <tr>{createColumn(1, \"+\")}</tr>\n        <tr>{createColumn(4, \"-\")}</tr>\n        <tr>{createColumn(7, \"*\")}</tr>\n        <tr style={styles.tr}>\n          <td>\n            <Button text=\"C\" color=\"pink\" click={clear} />\n          </td>\n          <td>\n            <Button\n              click={() => dispatch({ type: \"add\", action: 0 })}\n              text={\"0\"}\n              color=\"white\"\n            />\n          </td>\n          <td>\n            <Button text=\"=\" color=\"lightgreen\" click={calculateResult} />\n          </td>\n          <td>\n            <Button\n              click={() => dispatch({ type: \"add\", action: \"/\" })}\n              text={\"/\"}\n              color=\"darkgrey\"\n            />\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\nconst styles = {\n  container: {},\n  tr: {\n    marginLeft: \"10px\",\n  },\n};\n","interface Answer {\n  answer: string;\n  condition: boolean;\n}\n\nexport const answers: ((num: number) => Answer)[] = [\n  (num) => {\n    return { answer: \"Thats at least 10\", condition: num > 10 };\n  },\n  (num) => {\n    return { answer: \"I think it's \" + num, condition: true };\n  },\n  (num) => {\n    return { answer: \"Thats a very big number\", condition: num > 1000 };\n  },\n  (num) => {\n    return { answer: \"I have no idea\", condition: true };\n  },\n  (num) => {\n    return { answer: \"Your guess is as good as mine\", condition: true };\n  },\n  (num) => {\n    return { answer: \"You should know this\", condition: true };\n  },\n  (num) => {\n    const answer = Math.floor(\n      Math.random() * (num + 3 - (num - 2) + 1) + (num - 2)\n    );\n    return { answer: \"I'm pretty sure it's \" + answer, condition: true };\n  },\n  (num) => {\n    return { answer: \"Thats \" + (num + 3), condition: num < 100 };\n  },\n  (num) => {\n    return {\n      answer: \"I'm sure it's \" + (num + (Math.floor(Math.random() * 6) + 1)),\n      condition: num < 500,\n    };\n  },\n  (num) => {\n    return { answer: \"It's below 0\", condition: num < 0 };\n  },\n  (num) => {\n    return {\n      answer: \"I'm 100% sure it's \" + (num + 1),\n      condition: num > 10 && num < 200,\n    };\n  },\n  (num) => {\n    return {\n      answer: \"I know what it is but I won't tell you\",\n      condition: true,\n    };\n  },\n  (num) => {\n    return {\n      answer: \"The answer is WAY to big\",\n      condition: num > 1500,\n    };\n  },\n  (num) => {\n    return { answer: \"Your answer is \" + (num - 0.01), condition: true };\n  },\n  (num) => {\n    return { answer: num.toString(), condition: true };\n  },\n  (num) => {\n    return { answer: (num - 1).toString(), condition: true };\n  },\n  (num) => {\n    return { answer: (num + 1).toString(), condition: true };\n  },\n  (num) => {\n    return {\n      answer: `It's either ${num + Math.floor(Math.random() * 2)} or ${\n        num - Math.floor(Math.random() * 3)\n      }`,\n      condition: num < 100,\n    };\n  },\n  (num) => {\n    return {\n      answer: (3.14159265359).toString(),\n      condition: num < 6,\n    };\n  },\n];\n","import React, { useState, useEffect } from \"react\";\nimport { Display } from \"./calculator pieces/Display\";\nimport { useAction } from \"./useAction\";\nimport { calculate } from \"./calculate\";\nimport { Buttons } from \"./calculator pieces/Buttons\";\nimport { answers } from \"./answers\";\n\ninterface Props {}\n\nexport const Calculator: React.FC<Props> = () => {\n  const [text, setText] = useState<string>(\"\");\n  const [actions, dispatch] = useAction();\n\n  useEffect(() => {\n    if (actions.length === 0) return;\n    setText(\n      actions\n        .map((action) => {\n          return typeof action === \"number\"\n            ? action.toString()\n            : \" \" + action + \" \";\n        })\n        .join(\"\")\n    );\n  }, [actions]);\n\n  const calculateResult = () => {\n    const actualResult = calculate(actions);\n\n    let posibleAnswers: string[] = [];\n    answers.forEach((answer) => {\n      const possibleAnswer = answer(actualResult);\n      if (possibleAnswer.condition) {\n        posibleAnswers.push(possibleAnswer.answer);\n      }\n    });\n\n    dispatch({ type: \"clear\" });\n    setText(posibleAnswers[Math.floor(Math.random() * posibleAnswers.length)]);\n  };\n\n  return (\n    <div style={styles.container}>\n      <Display text={text} />\n      <Buttons\n        dispatch={dispatch}\n        calculateResult={calculateResult}\n        clear={() => {\n          dispatch({ type: \"clear\" });\n          setText(\"\");\n        }}\n      />\n    </div>\n  );\n};\n\nconst styles = {\n  container: {\n    margin: \"auto\",\n    width: \"300px\",\n    paddingBottom: \"10px\",\n    backgroundColor: \"grey\",\n    borderRadius: \"15px\",\n    overflow: \"auto\",\n  },\n};\n","import React from \"react\";\nimport { Calculator } from \"./components/Calculator\";\n\nfunction App() {\n  return (\n    <div>\n      <div>\n        <h1 style={styles.title}>Terrible Calculator</h1>\n        <Calculator />\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  title: {\n    textAlign: \"center\" as const,\n    paddingTop: \"50px\",\n    fontSize: \"60px\",\n  },\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { Action } from \"./useAction\";\n\n// This will calculate the actual result and not the terrible one\nexport const calculate = (actions: Action[]): number => {\n  if (actions.length === 0) return 0;\n\n  const expression = removeIllegalOperators(actions).map((action) => {\n    if (typeof action === \"number\") {\n      return action.toString();\n    } else {\n      return action;\n    }\n  });\n\n  /* eslint no-eval: 0 */\n  return eval(expression.join(\" \"));\n};\n\n// Removes operators if they are first or last.\nconst removeIllegalOperators = (actions: Action[]) => {\n  return actions.filter((action, i) => {\n    if (typeof action === \"string\") {\n      return !(i === 0 || i === actions.length - 1);\n    } else {\n      return true;\n    }\n  });\n};\n"],"sourceRoot":""}